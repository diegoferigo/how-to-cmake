@PACKAGE_INIT@

# Hack: pass the package name with the variable VARS_PREFIX as a relative directory,
# and then strip out the path that is automatically prefixed
get_filename_component(PKG_NAME @PACKAGE_VARS_PREFIX@ NAME)

# Set the include directories
set_and_check(${PKG_NAME}_INCLUDE_DIRS "@PACKAGE_PACKAGECONFIG_INCLUDE_DIRS@")

# Create a PACKAGE_LIBRARY alias for the namespaced project's target name
set(${PKG_NAME}_LIBRARY ${PKG_NAME}::${PKG_NAME})

# Process optional required components
include(CMakeFindDependencyMacro)
set(REQUIRED_COMPONENTS "@PACKAGE_REQUIRED_COMPONENTS@")
if (REQUIRED_COMPONENTS) # Not empty list
    foreach(ITH_COMPONENT ${REQUIRED_COMPONENTS})
        get_filename_component(COMPONENT_NAME ${ITH_COMPONENT} NAME)
        find_dependency(${COMPONENT_NAME})
    endforeach()
endif()

# Include the exported targets
get_filename_component(PKG_NAME @PACKAGE_VARS_PREFIX@ NAME) # PKG_NAME get updated every
                                                            # find_dependency() call
include ("${CMAKE_CURRENT_LIST_DIR}/${PKG_NAME}Targets.cmake")
